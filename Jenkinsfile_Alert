#!groovy

properties([

    parameters([
        string(defaultValue: 'sabir.ilyasov_ext@novartis.com, syed.safdar_abbas_rizvi_ext@novartis.com,xiukui.ji_ext@novartis.com', description: '', name: 'v_recipients', trim: false),
        string(defaultValue: 'DEV', description: 'Environments should be defined in this way DEV - for development, QA - for pred production, PRD - for production', name: 'v_env', trim: false),
        string(defaultValue: 'TAD.IT.F1.UC.EDM_DE_GOV_ORG@dl.mgd.novartis.com,NBS.IT.TAD.F1.UCE_ALL_ORG@dl.mgd.novartis.com,AA_Forumla_One_Platform_PRJ_GBL_GBL@dl.mgd.novartis.com', description: '', name: 'v_extra', trim: false),
        string(defaultValue: 'AA_Forumla_One_Platform_PRJ_GBL_GBL@dl.mgd.novartis.com', description: '', name: 'v_ops_dl', trim: false),
        string(defaultValue: 'NBS.IT.TAD.F1.UCE_ALL_ORG@dl.mgd.novartis.com', description: '', name: 'v_uce_dl', trim: false),
        string(defaultValue: 'syed.safdar_abbas_rizvi_ext@novartis.com, sabir.ilyasov_ext@novartis.com, xiukui.ji_ext@novartis.com', description: '', name: 'v_escalation', trim: false)


    ])
])



pipeline {
    agent {label 'f1_analytics_slave'}
    triggers {
        cron('H */24 * * *')
        
    }
    environment {
		db_str          = ''
		HTTP_PROXY      = 'http://proxy-euie.aws.novartis.net:3128'
        HTTPS_PROXY     = 'http://proxy-euie.aws.novartis.net:3128'
        http_proxy      = 'http://proxy-euie.aws.novartis.net:3128'
        https_proxy     = 'http://proxy-euie.aws.novartis.net:3128'
        NO_PROXY        = '169.254.169.254,169.254.170.2,.eu.novartis.net,.na.novartis.net,.aws.novartis.net'
        no_proxy        = '169.254.169.254,169.254.170.2,.eu.novartis.net,.na.novartis.net,.aws.novartis.net'
        db_params       = "-D v_env=\"${params.v_env}\""
        sf_acct         = getsfaccount(params.v_env)
        sf_creds_id     = getsfusername()
        sf_cred         = credentials("${env.sf_creds_id}")
        file_contents   = ''
        file_contents1  = ''

    }



    stages {
        stage('predeploy') {
            steps {
                sh """
                  set +x
                  echo '''
                  ###############################
                  ### Preparing Script to run ###
                  ###############################
                  '''
                    touch `pwd`/config.tmp

                    echo "[connections]" > `pwd`/config.tmp
                    echo "[connections.novartis_tmp]" >> `pwd`/config.tmp
                    echo "accountname=${SF_ACCT}" >> `pwd`/config.tmp
                    echo "username=${env.sf_cred_USR}" >> `pwd`/config.tmp
                    echo 'password="${env.sf_cred_PSW}"' >> `pwd`/config.tmp
                    echo "repository_base_url = https://sfc-repo.snowflakecomputing.com/snowsql" >> `pwd`/config.tmp

                    touch `pwd`/database_script.sh
                    chmod +x `pwd`/database_script.sh

				    echo '#!/bin/bash' > `pwd`/database_script.sh
				    echo '  if [ "\$#" -ne 3 ]; then ' >> `pwd`/database_script.sh
	                echo '     echo "\$(date +"%Y %m %d %H:%M:%S") [FAILURE] Improper number of arguments supplied (requires 3)" ' >> `pwd`/database_script.sh
	                echo '     exit 2 ' >> `pwd`/database_script.sh
	                echo '  fi ' >> `pwd`/database_script.sh
	                echo '##:-----set vars----- ' >> `pwd`/database_script.sh
	                echo 'connection="\$1" ' >> `pwd`/database_script.sh
	                echo 'script_dir="\$2" ' >> `pwd`/database_script.sh
	                echo 'db_params="\$3" ' >> `pwd`/database_script.sh

	                echo 'sql_directory=`pwd`/sql_scripts/\${script_dir} ' >> `pwd`/database_script.sh
	                echo 'echo "\$(date +"%Y %m %d %H:%M:%S") [INFO] Starting \${script_dir} script..." ' >> `pwd`/database_script.sh
	                echo 'shopt -s extglob ' >> `pwd`/database_script.sh
	                echo 'for f in \${sql_directory}/*.*; do ' >> `pwd`/database_script.sh
	                echo '     echo "\$(date +"%Y %m %d %H:%M:%S") [INFO] Executing \${f}..." ' >> `pwd`/database_script.sh
	                echo '     /usr/local/bin/snowsql --config `pwd`/config.tmp  -c \${connection} -f \${f} \${db_params} -o exit_on_error=true -o friendly=false -o header=false -o timing=false -o variable_substitution=true -o output_file=myhistfile.csv -o output_format=csv ' >> `pwd`/database_script.sh
	                echo '     exit_status="\$?" ' >> `pwd`/database_script.sh
	                echo '     if [ "\${exit_status}" -ne 0 ]; then ' >> `pwd`/database_script.sh
	                echo '         echo "\$(date +"%Y %m %d %H:%M:%S") [FAILURE] There was a failure in the \${script_dir} SQL script execution.  File: \${f}." ' >> `pwd`/database_script.sh
                    echo '         echo "\${f}" >> `pwd`/failed_files.txt' >> `pwd`/database_script.sh
	                echo '         exit 1 ' >> `pwd`/database_script.sh
	                echo '     fi ' >> `pwd`/database_script.sh
	                echo 'done ' >> `pwd`/database_script.sh
	                echo 'echo "\$(date +"%Y %m %d %H:%M:%S") [SUCCESS] \${script_dir} SQL scripts executed successfully." ' >> `pwd`/database_script.sh
	              """
            }
			      post {
				        unsuccessful {
					        sh """ echo "Predeploy not success" """
				        }
			      }
        }
		    stage('Alerts') {
            steps {
                sh """
                    set +x
                    echo '''
                    ##################################
                    ### Checking alerted warehouse ###
                    ##################################
                    '''
                    `pwd`/database_script.sh novartis_tmp alerts  \"${db_params}\"
                """
            }
			      post {
				        unsuccessful {
					         sh """ echo "Deploy not success" """
				        }
			      }
        }
       
        stage('wh_alert_pre') {
            steps {
                 get_output('wh_alert_pre', 'alerting_framework/wh_alert/')
            }
        }
        stage('wh_alert_send_file') {
            steps {
                script {
                    myfile="${WORKSPACE}/wh_alert_pre_alert.csv"
                    if (fileExists(myfile)) {
                        echo "if file exist condition passed"
                        readFile(myfile).split('\n').each { line ->
                            println("Printing Line")
                            print(line)
                            def fields = line.split('\t')
                            echo "readCSV condition passed"
                            def v_wh_name = fields[0]
                            println("Printing Warehouse Name")
                            println(v_wh_name)
                            def v_owner = fields[9]
                            println("Printing Owner Email")
                            println(v_owner)
                            def v_total_credits_used = fields[3]
                            println("TOTAL_CREDITS_USED is: " + v_total_credits_used)
                            def v_credit_quota = fields[6]
                            println("CREDIT_QUOTA is: " + v_credit_quota)
                            def v_credit_usage_percentage = fields[7]
                            println("CREDIT_USAGE_PERCENT is: " + v_credit_usage_percentage)

                            get_single_usr_output('wh_alert', v_wh_name, 'alerting_framework/wh_alert/')
                            get_webhook_usr_output('wh_alert', v_wh_name, 'alerting_framework/wh_alert/')

                            get_static_html(v_wh_name)

                            sh """
                            echo "<table><tr><th>WAREHOUSE NAME</th><th>USER NAME</th><th>ROLE NAME</th><th>CREDITS BY USER</th>" >> ${v_wh_name}_static_html
                            """
                            get_email_content_sgl_usr(v_wh_name)
                            
                            get_html_file(v_wh_name,'Snowflake Warehouse Usage',"The current quota usage is <b style=color:#FF0000>${v_total_credits_used}</b> credits which reached to threshold level or higher. Currently <b style=color:#FF0000>${v_credit_usage_percentage}%</b> warehouse credits used whose set usage credits threshold is ${v_credit_quota}.<br><p>Please take action accordingly.</p>")
                    
                            //get_send_mail(v_wh_name, 'Snowflake Warehouse Usage', v_owner)

                            get_alert_metadata_table('Snowflake_Warehouse_Usage', v_wh_name)

                            get_alert_count_output('Snowflake_Warehouse_Usage',v_wh_name)

                            get_send_mail_with_count(v_wh_name, 'Snowflake Warehouse Usage', v_owner, 'Snowflake_Warehouse_Usage', params.v_recipients)
                        }
                        }
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for wh_alert not success" """
                        }
                  }
        }
        stage('admin_grant') {
            steps {
                 get_output('admin_grant', 'alerting_framework/admin_grant/')
                 get_webhook_output('admin_grant', 'alerting_framework/admin_grant/')
            }
        }
        stage('admin_grant_send_file') {
            steps {
                script {
                        get_static_html('admin_grant')

                        sh """
                        echo "<table><tr><th>ALERT TYPE</th><th>ENVIRONMENT</th><th>OBJECT</th><th>EVENT TIME</th><th>ALERT TIME</th><th>DESCRIPTION</th><th>EVENT DATA</th><th>SEVERITY</th><th>ACTOR</th><th>ACTION</th>" >> admin_grant_static_html
                        """

                        get_email_content('admin_grant')
                        
                        get_html_file('admin_grant','Snowflake Admin Role Granted Alert', 'Please take action accordingly.')
                
                        get_send_mail_platform('admin_grant', 'Snowflake Admin Role Granted Alert', params.v_ops_dl)
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for admin_grant not success" """
                        }
                  }
        }
        /* DO NOT DELETE
        stage('role_leakage_alert_pre') {
            steps {
                 get_output('role_leakage_alert_pre', 'alerting_framework/role_leakage_alert/')
            }
        }
        stage('role_leakage_alert_send_file') {
            steps {
                script {
                    myfile="${WORKSPACE}/role_leakage_alert_pre_alert.csv"
                    if (fileExists(myfile)) {
                        echo "if file exist condition passed"
                        readCSV(file: myfile).each { line ->
                            echo "readCSV condition passed"
                            def v_role = line[0]
                            println(v_role)                            

                            get_single_usr_output('role_leakage_alert', v_role, 'alerting_framework/role_leakage_alert/')
                            def role_output = readCSV(file: "${v_role}_alert.csv")
                            def v_owner_email = role_output[0][1]
							def v_user_list = role_output[0][2]
                            println("Printing email address")
                            println(v_owner_email)

                            get_static_html(v_role)

                            sh """
                            echo "<table><tr><th>ROLE NAME</th><th>OWNER EMAIL</th><th>USER LIST</th>" >> ${v_role}_static_html
                            """
                            get_email_content_sgl_usr(v_role)
                            
                            get_html_file(v_role,'Role Leakage Alert','Please remove the below list of users from the Role because only SYSTEM account can be granted to Refinement Layer Data Engineer Role.')
                    
                            get_send_mail(v_role, 'Role Leakage Alert', v_owner_email, params.v_extra)
                        }
                        }
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for role_leakage_alert not success" """
                        }
                  }
        } */
        stage('non_gmt_user_pre') {
            steps {
                 get_output('non_gmt_user_pre', 'alerting_framework/non_gmt_user/')
            }
        }
        stage('non_gmt_user_send_file') {
            steps {
                script {
                    myfile="${WORKSPACE}/non_gmt_user_pre_alert.csv"
                    if (fileExists(myfile)) {
                        echo "if file exist condition passed"
                        readCSV(file: myfile).each { line ->
                            echo "readCSV condition passed"
                            def v_owner = line[0]

                            get_single_usr_output('non_gmt_user', v_owner, 'alerting_framework/non_gmt_user/')
                            get_webhook_usr_output('non_gmt_user', v_owner, 'alerting_framework/non_gmt_user/')

                            get_static_html(v_owner)

                            sh """
                            echo "<table><tr><th>CREATED DATE</th><th>NAME</th><th>DISPLAY NAME</th><th>DISABLED STATUS</th><th>OWNER</th><th>DELETED STATUS</th>" >> ${v_owner}_static_html
                            """
                            get_email_content_sgl_usr(v_owner)
                            
                            get_html_file(v_owner,'Non GMT Users Alert','Please take action accordingly.')
                    
                            //get_send_mail(v_owner, 'Non GMT Users Alert', params.v_extra)

                            get_alert_metadata_table('Non_GMT_Users_Alert', v_owner)

                            get_alert_count_output('Non_GMT_Users_Alert',v_owner)

                            get_send_mail_with_count(v_owner, 'Non GMT Users Alert', v_owner, 'Non_GMT_Users_Alert', params.v_recipients)
                        }
                        }
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for non_gmt_user not success" """
                        }
                  }
        }        
        /* **DO NOT REMOVE**
        stage('suspicious_query_increase') {
            steps {
                 get_output('suspicious_query_increase', 'alerting_framework/')
            }
        }
        stage('suspicious_query_increase_send_file') {
            steps {
                script {
                        get_static_html('suspicious_query_increase')

                        sh """
                        echo "<table><tr><th>DISPLAY NAME</th><th>LAST MONTH AVG QUERY</th><th>QUERY INCREASED IN LAST 12 HRS</th>" >> suspicious_query_increase_static_html
                        """

                        get_email_content('suspicious_query_increase')
                        
                        get_html_file('suspicious_query_increase','Suspicious Query Increase ', 'Please take action accordingly.')
                
                        get_send_mail_platform('suspicious_query_increase', 'Suspicious Query Increase ', params.v_ops_dl)
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for suspicious_query_increase not success" """
                        }
                  }
        }
        */
        stage('login_failed') {
            steps {
                 get_output('login_failed', 'alerting_framework/')
                 get_webhook_output('login_failed', 'alerting_framework/')
            }
        }
        stage('login_failed_send_file') {
            steps {
                script {
                        get_static_html('login_failed')

                        sh """
                        echo "<table><tr><th>USER NAME</th><th>CLIENT IP</th><th>REPORTED CLIENTTYPE</th><th>ERROR CODE</th><th>ERROR MESSAGE</th><th>COUNTS</th>" >> login_failed_static_html
                        """

                        get_email_content('login_failed')
                        
                        get_html_file('login_failed','Login Failed Alert', 'User login failed more than 3 times. Please take action accordingly.')
                
                        get_send_mail_platform('login_failed', 'Login Failed Alert', params.v_ops_dl)
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for login_failed not success" """
                        }
                  }
        }
        stage('wh_credits_spike') {
            steps {
                 get_output('wh_credits_spike', 'alerting_framework/')
                 get_webhook_output('wh_credits_spike', 'alerting_framework/')
            }
        }
        stage('wh_credits_spike_send_file') {
            steps {
                script {
                        get_static_html('wh_credits_spike')

                        sh """
                        echo "<table><tr><th>WAREHOUSE NAME</th><th>AVG_CREDITS USED IN ONE MONTH</th><th>CREDIT SPIKE IN 12 HRS</th>" >> wh_credits_spike_static_html
                        """
                        get_email_content('wh_credits_spike')
                        
                        get_html_file('wh_credits_spike','Warehouse Credits Spike', 'Please take action action accordingly.')
                
                        get_send_mail_platform('wh_credits_spike', 'Warehouse Credits Spike', params.v_ops_dl)
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for wh_credits_spike not success" """
                        }
                  }
        }
        stage('modification_sensitive_role') {
            steps {
                 get_output('modification_sensitive_role', 'alerting_framework/')
                 get_webhook_output('modification_sensitive_role', 'alerting_framework/')
            }
        }
        stage('modification_sensitive_role_send_file') {
            steps {
                script {
                        get_static_html('modification_sensitive_role')

                        sh """
                        echo "<table><tr><th>START TIME</th><th>DISPLAY NAME</th><th>ROLE NAME</th><th>QUERY ID</th><th>QUERY TEXT</th>" >> modification_sensitive_role_static_html
                        """

                        get_email_content('modification_sensitive_role')
                        
                        get_html_file('modification_sensitive_role','Modification of Sensitive Role', 'Please take action accordingly.')
                
                        get_send_mail_platform('modification_sensitive_role', 'Modification of Sensitive Role')
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for modification_sensitive_role not success" """
                        }
                  }
        }
        
        stage('password_change') {
            steps {
                 get_output('password_change', 'alerting_framework/')
                 get_webhook_output('password_change', 'alerting_framework/')
            }
        }
        stage('password_change_send_file') {
            steps {
                script {
                        get_static_html('password_change')

                        sh """
                        echo "<table><tr><th>START TIME</th><th>DISPLAY NAME</th><th>ROLE NAME</th><th>QUERY TEXT</th>" >> password_change_static_html
                        """

                        get_email_content('password_change')
                        
                        get_html_file('password_change','Snowflake Password Change', 'Please take action accordingly.')
                
                        get_send_mail_platform('password_change', 'Snowflake Password Change')
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for password_change not success" """
                        }
                  }
        }
        stage('bad_login_by_user') {
            steps {
                 get_output('bad_login_by_user', 'alerting_framework/')
                 get_webhook_output('bad_login_by_user', 'alerting_framework/')
            }
        }
        stage('bad_login_by_user_send_file') {
            steps {
                script {
                        get_static_html('bad_login_by_user')

                        sh """
                        echo "<table><tr><th>USER NAME</th><th>REPORTED CLIENT TYPE</th><th>ERROR MESSAGE</th>" >> bad_login_by_user_static_html
                        """

                        get_email_content('bad_login_by_user')
                        
                        get_html_file('bad_login_by_user','Bad Login By Single User', 'User attempted to login more than 3 time. Please take action accordingly.')
                
                        get_send_mail_platform('bad_login_by_user', 'Bad Login By Single User', params.v_ops_dl)
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for bad_login_by_user not success" """
                        }
                  }
        }
        stage('mv_spent_pre') {
            steps {
                 get_output('mv_spent_pre', 'alerting_framework/mv_spent/')
            }
        }
        stage('mv_spent_send_file') {
            steps {
                script {
                    myfile="${WORKSPACE}/mv_spent_pre_alert.csv"
                    if (fileExists(myfile)) {
                        echo "if file exist condition passed"
                        readCSV(file: myfile).each { line ->
                            echo "readCSV condition passed"
                            def v_owner = line[0]

                            get_single_usr_output('mv_spent', v_owner, 'alerting_framework/mv_spent/')

                            get_static_html(v_owner)

                            sh """
                            echo "<table><tr><th>MONTH</th><th>UC NAME</th><th>OWNER</th><th>TOTAL CREDITS USED</th><th>MONTHLY NOTIFICATION CREDIT LIMITS</th>" >> ${v_owner}_static_html
                            """
                            get_email_content_sgl_usr(v_owner)
                            
                            get_html_file_period(v_owner,'Materialized View Spent','for alerted warehouses','Please take action accordingly.')
                    
                            get_send_mail_platform(v_owner, 'Materialized View Spent', params.v_recipients)
                        }
                        }
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for mv_spent not success" """
                        }
                  }
        }
        stage('user_creation_alert') {
            steps {
                 get_output('user_creation_alert', 'alerting_framework/')
                 get_webhook_output('user_creation_alert', 'alerting_framework/')
            }
        }
        stage('user_creation_alert_send_file') {
            steps {
                script {
                        get_static_html('user_creation_alert')

                        sh """
                        echo "<table><tr><th>START DATE</th><th>USER NAME</th><th>ROLE NAME</th><th>QUERY TEXT</th>" >> user_creation_alert_static_html
                        """

                        get_email_content('user_creation_alert')
                        
                        get_html_file('user_creation_alert','User Creation Alert', 'Please take action accordingly.')
                
                        get_send_mail_platform('user_creation_alert', 'User Creation Alert', params.v_ops_dl)
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for user_creation_alert not success" """
                        }
                  }
        }
        stage('scim_alert') {
            steps {
                 get_output('scim_alert', 'alerting_framework/')
                 get_webhook_output('scim_alert', 'alerting_framework/')
            }
        }
        stage('scim_alert_send_file') {
            steps {
                script {
                        get_static_html('scim_alert')

                        sh """
                        echo "<table><tr><th>EVENT TIMESTAMP</th><th>ENDPOINT</th><th>METHOD</th><th>STATUS</th><th>DETAILS</th><th>USER NAME</th><th>RESOURCE DOMAIN</th>" >> scim_alert_static_html
                        """

                        get_email_content('scim_alert')
                        
                        get_html_file('scim_alert','SCIM Alert', 'Please take action accordingly....')
                
                        get_send_mail_platform('scim_alert', 'SCIM Alert')
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for scim_alert not success" """
                        }
                  }
        }
        stage('long_running_query_pre') {
            steps {
                 get_output('long_running_query_pre', 'alerting_framework/long_running_query/')
            }
        }
        stage('long_running_query_send_file') {
            steps {
                script {
                    myfile="${WORKSPACE}/long_running_query_pre_alert.csv"
                    if (fileExists(myfile)) {
                        echo "if file exist condition passed"
                        readCSV(file: myfile).each { line ->
                            echo "readCSV condition passed"
                            def v_wh_name = line[0]
                            println(v_wh_name)

                            get_single_usr_output('long_running_query', v_wh_name, 'alerting_framework/long_running_query/')
                            def wh_list_output = readCSV(file: "${v_wh_name}_alert.csv")
                            def v_owner_email = wh_list_output[0][10]
                            println("Printing email address")
                            println(v_owner_email)
                            get_webhook_usr_output('long_running_query', v_wh_name, 'alerting_framework/long_running_query/')

                            get_static_html(v_wh_name)

                            sh """
                            echo "<table><tr><th>QUERY ID</th><th>DATABASE NAME</th><th>SCHEMA NAME</th><th>EXECUTION STATUS</th><th>ERROR CODE</th><th>QUERY EXECUTED BY</th><th>WAREHOUSE NAME</th><th>START TIME</th><th>END TIME</th><th>TOTAL TIME MIN</th></th><th>WH OWNER EMAIL</th>" >> ${v_wh_name}_static_html
                            """
                            get_email_content_sgl_usr(v_wh_name)
                            
                            get_html_file(v_wh_name,'Snowflake Long Running Query','Please take action accordingly.')
                    
                            //get_send_mail(v_wh_name, 'Snowflake Long Running Query', v_owner_email, params.v_ops_dl)

                            get_alert_metadata_table('Snowflake_Long_Running_Query', v_wh_name)

                            get_alert_count_output('Snowflake_Long_Running_Query',v_wh_name)

                            get_send_mail_with_count(v_wh_name, 'Snowflake Long Running Query', v_owner_email, 'Snowflake_Long_Running_Query', params.v_recipients)
                        }
                        }
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for Long Running Query not success" """
                        }
                  }
        }
        stage('task_alert_pre') {
            steps {
                 get_output('task_alert_pre', 'alerting_framework/task_alert/')
            }
        }
        stage('task_alert_send_file') {
            steps {
                script {
                    myfile="${WORKSPACE}/task_alert_pre_alert.csv"
                    if (fileExists(myfile)) {
                        echo "if file exist condition passed"
                        readCSV(file: myfile).each { line ->
                            echo "readCSV condition passed"
                            def v_owner = line[0]

                            get_single_usr_output('task_alert', v_owner, 'alerting_framework/task_alert/')
                            get_webhook_usr_output('task_alert', v_owner, 'alerting_framework/task_alert/')

                            get_static_html(v_owner)

                            sh """
                            echo "<table><tr><th>TASK NAME</th><th>DATABASE NAME</th><th>SCHEMA NAME</th><th>STATUS</th><th>ERROR_MESSAGE</th><th>TASK CREATOR</th><th>OWNER</th><th>OBJECT NAME</th><th>FAILED COUNT</th>" >> ${v_owner}_static_html
                            """
                            get_email_content_sgl_usr(v_owner)
                            
                            get_html_file(v_owner,'Task Failed Alert','Please take appropriate action to resolve the issue.')
                    
                            //get_send_mail(v_owner, 'Task Failed Alert', params.v_ops_dl)

                            get_alert_metadata_table('Task_Failed_Alert', v_owner)

                            get_alert_count_output('Task_Failed_Alert',v_owner)

                            get_send_mail_with_count(v_owner, 'Task Failed Alert', v_owner, 'Task_Failed_Alert', params.v_recipients)
                        }
                        }
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for task_alert not success" """
                        }
                  }
        }
        stage('wh_tags_list_pre') {
            steps {
                 get_output('wh_tags_list_pre', 'alerting_framework/wh_tags_list/')
            }
        }
        stage('wh_tags_list_send_file') {
            steps {
                script {
                    myfile="${WORKSPACE}/wh_tags_list_pre_alert.csv"
                    if (fileExists(myfile)) {
                        echo "if file exist condition passed"
                        readCSV(file: myfile).each { line ->
                            echo "readCSV condition passed"
                            def v_wh_name = line[0]
                            println(v_wh_name)

                            get_single_usr_output('wh_tags_list', v_wh_name, 'alerting_framework/wh_tags_list/')
                            def wh_list_output = readCSV(file: "${v_wh_name}_alert.csv")
                            def v_owner_email = wh_list_output[0][1]
                            println("Printing email address")
                            println(v_owner_email)
                            get_webhook_usr_output('wh_tags_list', v_wh_name, 'alerting_framework/wh_tags_list/')

                            get_static_html(v_wh_name)

                            sh """
                            echo "<table><tr><th>WAREHOUSE NAME</th><th>OWNER EMAIL ADDRESS</th>" >> ${v_wh_name}_static_html
                            """
                            get_email_content_sgl_usr(v_wh_name)
                            
                            get_html_file(v_wh_name,'Snowflake Untagged Warehouse for Refinement layer','Please take action accordingly.')
                    
                            //get_send_mail(v_wh_name, 'Snowflake Untagged Warehouse for Refinement layer', v_owner_email)

                            get_alert_metadata_table('Snowflake_Untagged_Warehouse_for_Refinement_layer', v_wh_name)

                            get_alert_count_output('Snowflake_Untagged_Warehouse_for_Refinement_layer',v_wh_name)

                            get_send_mail_with_count(v_wh_name, 'Snowflake Untagged Warehouse for Refinement layer', v_owner_email, 'Snowflake_Untagged_Warehouse_for_Refinement_layer', params.v_recipients)
                        }
                        }
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for wh_tags_list not success" """
                        }
                  }
        }
        stage('task_report_tbl_pre') {
            steps {
                 script {
                    sh ("""/usr/local/bin/snowsql --config `pwd`/config.tmp  -c novartis_tmp -f `pwd`/sql_scripts/alerting_framework/task_report/task_report_table.sql -o exit_on_error=true -o friendly=false -o timing=false -o header=false -o variable_substitution=true -o output_file=task_report_tbl_pre.csv -o output_format=csv
                    """)
                 }
            }
        }
        stage('task_report_pre') {
            steps {
                 get_output('task_report_pre', 'alerting_framework/task_report/')
            }
        }
        stage('task_report_send_file') {
            steps {
                script {
                    myfile="${WORKSPACE}/task_report_pre_alert.csv"
                    if (fileExists(myfile)) {
                        echo "if file exist condition passed"
                        readCSV(file: myfile).each { line ->
                            echo "readCSV condition passed"
                            def v_task_user_name = line[0]
                            println(v_task_user_name)

                            get_single_usr_output('task_report', v_task_user_name, 'alerting_framework/task_report/')
                            get_webhook_usr_output('task_report', v_task_user_name, 'alerting_framework/task_report/')

                            get_static_html(v_task_user_name)

                            sh """
                            echo "<table><tr><th>USER NAME</th><th>ROLE NAME</th><th>DATABASE NAME</th><th>SCHEMA NAME</th><th>TASK NAME</th><th>CREATED DATE</th>" >> ${v_task_user_name}_static_html
                            """
                            get_email_content_sgl_usr(v_task_user_name)
                            
                            get_html_file(v_task_user_name,'Snowflake Task Report','Below Snowflake Tasks are created under wrong Database and Schema. Please drop and create under database <b>CONTROL_DB</b> and schema <b>UTILITY</b>.')
                    
                            // get_send_mail(v_task_user_name, 'Snowflake Task Report', v_task_user_name, params.v_ops_dl)

                            get_alert_metadata_table('Snowflake_Task_Report', v_task_user_name)

                            get_alert_count_output('Snowflake_Task_Report',v_task_user_name)

                            get_send_mail_with_count(v_task_user_name, 'Snowflake Task Report', v_task_user_name, 'Snowflake_Task_Report', params.v_recipients)
                        }
                        }
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for Snowflake Task Report not success" """
                        }
                  }
        }
        stage('authorization_errors_pre') {
            steps {
                 get_output('authorization_errors_pre', 'alerting_framework/authorization_errors/')
            }
        }
        stage('authorization_errors_send_file') {
            steps {
                script {
                    myfile="${WORKSPACE}/authorization_errors_pre_alert.csv"
                    if (fileExists(myfile)) {
                        echo "if file exist condition passed"
                        readCSV(file: myfile).each { line ->
                            echo "readCSV condition passed"
                            def v_user_name = line[0]
                            println(v_user_name)                            

                            get_single_usr_output('authorization_errors', v_user_name, 'alerting_framework/authorization_errors/')
                            def auth_err = readCSV(file: "${v_user_name}_alert.csv")
                            def v_owner_email = auth_err[0][11]
                            println("Printing email address")
                            println(v_owner_email)
                            get_webhook_usr_output('authorization_errors', v_user_name, 'alerting_framework/authorization_errors/')

                            get_static_html(v_user_name)

                            sh """
                            echo "<table><tr><th>TITLE</th><th>ENVIRONMENT</th><th>OBJECT</th><th>EVENT TIME</th><th>ALERT TIME</th><th>DESCRIPTION</th><th>ACTOR</th><th>ACTION</th><th>SEVERITY</th><th>QUERY ID</th><th>QUERY NAME</th><th>EMAIL</th>" >> ${v_user_name}_static_html
                            """
                            get_email_content_sgl_usr(v_user_name)
                            
                            get_html_file(v_user_name,'Authorization Error Alert','The query executed by you are having insufficient privilege. Please take action accordingly.')
                    
                            //get_send_mail(v_user_name, 'Authorization Error Alert', v_owner_email, params.v_ops_dl)

                            get_alert_metadata_table('Authorization_Error_Alert', v_user_name)

                            get_alert_count_output('Authorization_Error_Alert',v_user_name)

                            get_send_mail_with_count(v_user_name, 'Authorization Error Alert', v_owner_email, 'Authorization_Error_Alert', params.v_recipients)
                        }
                        }
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for authorization_errors not success" """
                        }
                  }
        }
        stage('generate_scim_token') {
            steps {
                 get_output('generate_scim_token', 'alerting_framework/')
            }
        }
        stage('generate_scim_token_send_file') {
            steps {
                script {
                        myfilecount="${WORKSPACE}/generate_scim_token_alert.csv"

                        sh ("cat $myfilecount > gen_scim_outFile")

                        readFile(myfilecount).split('\n').each { line ->
                                println("Printing Line")
                                print(line)
                                def fields = line.split('\t')
                                echo "readCSV condition passed"
                                def token_age = fields[1]
                                println("Printing token_age")
                                println(token_age)
                                def remaining_expiry_day = fields[3]
                                println("Printing remaining_expiry_day")
                                println(remaining_expiry_day)
                                get_webhook_output('generate_scim_token', 'alerting_framework/')
                        
                                get_html_file_scim('generate_scim_token','Generate SCIM Token Alert', 'Please generate the SCIM token as it is going to expire in ', remaining_expiry_day)
                        
                                get_send_mail_platform('generate_scim_token', 'Generate SCIM Token Alert', params.v_ops_dl)
                                }                
                            }
                        }
                        post {
                                unsuccessful {
                                    sh """ echo "Data Content for generate_scim_token not success" """
                                }
                        }
        }

        stage('system_user_password_rotation_pre') {
            steps {
                 get_output('system_user_password_rotation_pre', 'alerting_framework/system_user_password_rotation/')
            }
        }
        stage('system_user_password_rotation_send_file') {
            steps {
                script {
                    myfile="${WORKSPACE}/system_user_password_rotation_pre_alert.csv"
                    if (fileExists(myfile)) {
                        echo "if file exist condition passed"
                        readFile(file: myfile).split('\n').each { line ->
                            def fields = line.split('\t')
                            echo "readCSV condition passed"
                            sh ("cat $myfile")
                            def v_owner_name = fields[0]
                            println(v_owner_name)
                            

                            get_tsv_usr_output('system_user_password_rotation', v_owner_name, 'alerting_framework/system_user_password_rotation/')
                            println("get_single_usr_output completed")
                            get_static_html(v_owner_name)
                            get_webhook_usr_output('system_user_password_rotation', v_owner_name, 'alerting_framework/system_user_password_rotation/')

                            sh """
                            echo "<table><tr><th>USER NAME</th><th>PASSWORD LAST SET TIME</th><th>AGE IN DAYS</th><th>OWNER</th>" >> ${v_owner_name}_static_html
                            """
                            get_email_content(v_owner_name)
                            
                            get_html_file_period(v_owner_name,'Snowflake SYSTEM Users Password Rotation.','You are using less secure authentication method and you did not changed the password from more than 90 days.<p>It is recommended to rotate the password before 90 days.</p><p>Please explore alternative authentication method as per the <a href="https://novartisdevelop.atlassian.net/wiki/spaces/FOR/pages/207347122231/Snowflake+Authentication">document reference</a> for password authentication and immediately rotate the password.</p><p>If action will not be take in 2 weeks then we will require to disable the SYSTEM account.</p><h4>There are two option to rotate the password:</h4><ul><li>If you know the passwords for system accounts mentioned below then you can logon to snowflake Web UI and change the password</li><br><li>In case you do not know the password you can request support from UCE (they have automated pipeline for password rotation) or OneOps Support</li></ul>')

                            get_alert_metadata_table('Snowflake_SYSTEM_Users_Password_Rotation', v_owner_name)

                            get_alert_count_output('Snowflake_SYSTEM_Users_Password_Rotation',v_owner_name)
                    
                            get_send_mail_with_count(v_owner_name, 'Snowflake SYSTEM Users Password Rotation', v_owner_name, 'Snowflake_SYSTEM_Users_Password_Rotation', params.v_recipients)
                        }
                        }
                    }                
                }
                  post {
                        unsuccessful {
                            sh """ echo "Data Content for Snowflake SYSTEM Users Password Rotation not success" """
                        }
                  }
        }
        

	}
  post {
		success {
            println "Job Success"
		}
    failure {
			//  script {
			// 	  file_contents = readFile "${WORKSPACE}/failed_files.txt"
			//  }
		mail to: "${v_recipients}",
        subject: "${params.v_env} - Snowflake Jenkins Pipeline Failed :  Job_name-'${env.JOB_NAME} - build.no:[${env.BUILD_NUMBER}]'",
        body: """${params.v_env} - Snowflake Jenkins Pipeline Failed  \n \nJob name : ${env.JOB_NAME}, Job build no: ${env.BUILD_NUMBER},Job url: ${env.BUILD_URL} \n\n\n Failed file(s):\n${file_contents}"""
    }
    cleanup {
            deleteDir() /* clean up our workspace */
    }
  }
}

def getsfaccount(v_env) {
        if (v_env == 'DEV') {
        return "nvs6deveuwest1.eu-west-1";
        } else if (v_env == 'QA') {
        return "nvs7qaeuwest1.eu-west-1";
        } else {
        return "nvs8prdeuwest1.eu-west-1";
        }

    }

def getsfusername() {
    def ENV_Name = "${params.v_env}"
    if (ENV_Name == "PRD") {
       return 'SYS_F1_ALERTS_PRD';
    } else if (ENV_Name == "QA") {
       return 'SYS_F1_ALERTS_QA';
    } else {
       return 'SYS_F1_ALERTS_DEV';
    }
}

def get_alert_metadata_table(String alert_name_table, String owner_email) {
    sh ("""
        /usr/local/bin/snowsql --config `pwd`/config.tmp  -c novartis_tmp  -f `pwd`/sql_scripts/alerting_framework/alert_metadata/alerting_framework_table.sql -D v_alert_name=${alert_name_table} -D v_owner_email=${owner_email} -o variable_substitution=true
        """)
}

def get_alert_count_output(String alert_name_table, String owner_email) {
    sh ("""
        rm -rf ${alert_name_table}_alert_count.csv 2>/dev/null
        /usr/local/bin/snowsql --config `pwd`/config.tmp  -c novartis_tmp  -f `pwd`/sql_scripts/alerting_framework/alert_metadata/alert_count.sql -D v_alert_name=${alert_name_table} -D v_owner_email=${owner_email} -o exit_on_error=true -o friendly=false -o timing=false -o header=false -o variable_substitution=true -o output_file=${alert_name_table}_${owner_email}_alert_count.csv -o output_format=tsv
        """)
}

def get_output(String alert_name, String options = '') {
    sh ("""
        rm -rf ${alert_name}_alert.csv 2>/dev/null
        /usr/local/bin/snowsql --config `pwd`/config.tmp  -c novartis_tmp  -f `pwd`/sql_scripts/${options}${alert_name}.sql -o exit_on_error=true -o friendly=false -o timing=false -o header=false -o variable_substitution=true -o output_file=${alert_name}_alert.csv -o output_format=tsv
        """)
}

def get_tsv_usr_output(String alert_name, String filter, String options = '') {
    sh ("""
        set +x
        rm -rf ${filter}_alert.csv 2>/dev/null
        /usr/local/bin/snowsql --config `pwd`/config.tmp  -c novartis_tmp  -f `pwd`/sql_scripts/${options}${alert_name}.sql -D v_filter=${filter} -o exit_on_error=true -o friendly=false -o header=false -o timing=false -o variable_substitution=true -o output_file=${filter}_alert.csv -o output_format=tsv
        """)
}

def get_single_usr_output(String alert_name, String filter, String options = '') {
    sh ("""
        set +x
        rm -rf ${filter}_alert.csv 2>/dev/null
        /usr/local/bin/snowsql --config `pwd`/config.tmp  -c novartis_tmp  -f `pwd`/sql_scripts/${options}${alert_name}.sql -D v_filter=${filter} -o exit_on_error=true -o friendly=false -o header=false -o timing=false -o variable_substitution=true -o output_file=${filter}_alert.csv -o output_format=csv
        """)
}

def get_static_html(String result) {
    sh ("""
        set +x
        echo "<head><style>" > ${result}_static_html
        echo "table {font-family:verdana, sans-serif;font-size:12px;border-collapse:collapse;table-layout:fixed;width:1920px;}" >> ${result}_static_html
        echo "th {border: 1px solid #dddddd;text-align: center;padding: 5px;font-size:14px;color: white;background-color: black;}" >> ${result}_static_html
        echo "td {border: 1px solid #dddddd;text-align: left;padding: 5px;font-size:12px;word-break:break-all;}" >> ${result}_static_html
        echo "tr:hover {background-color:#f5f5f5;}" >> ${result}_static_html
        echo "p {font-family: verdana, arial, sans-serif;font-size:14px;}" >> ${result}_static_html
        echo "</style></head>" >> ${result}_static_html
        """)
}

def get_email_content(String result) {
    sh ("""
        cat ${result}_static_html > ${result}_email_content

        dynamic_html=`pwd`/${result}_alert.csv
                            
        awk 'BEGIN {FS="\t"}
        {
        printf "<TR>"
        for(i=1;i<=NF;i++)
        printf "<TD>%s</TD>", \$i
        printf "</TR>";
        }
        END {print "</TABLE>"}' \${dynamic_html} >> ${result}_email_content
        echo "awk command completed"

        echo "Removing double quotes"
        sed 's/\"//g' ${result}_email_content > ${result}_email_content_final

        echo "Opening final content"
        cat ${result}_email_content_final
        echo "closing final content"
    """)
}

def get_email_content_sgl_usr(String result) {
    sh ("""
        cat ${result}_static_html > ${result}_email_content

        dynamic_html=`pwd`/${result}_alert.csv
                            
        awk 'BEGIN {FS=","}
        {
        printf "<TR>"
        for(i=1;i<=NF;i++)
        printf "<TD>%s</TD>", \$i
        printf "</TR>";
        }
        END {print "</TABLE>"}' \${dynamic_html} >> ${result}_email_content
        echo "awk command completed"

        echo "Removing double quotes"
        sed 's/\"//g' ${result}_email_content > ${result}_email_content_final

        echo "Opening final content"
        cat ${result}_email_content_final
        echo "closing final content"
    """)
}

def get_html_file(String result, String alert_name, String options = '') {
    sh ("""echo  "<html>
                <header><title> Alert : ${alert_name}</title></header>
                <body> <p>Hi All,</p>
                <p><br>Please find below report of ${alert_name} in last 12 hours in ${params.v_env}.</p>
                <p>${options}</p>" > ${result}.html
                cat ${result}_email_content_final >> ${result}.html
                echo "<p><br>Thanks and Regards,<br><b><u>F1 Analytics Platform Team</u></b></p>
                <p>------------------------------------------------------------------------------------------------------------------------------------
                <br><i>This is an auto generated email. Please do not reply to this email.</i><br>
                ------------------------------------------------------------------------------------------------------------------------------------</p></body>
                </html>" >> ${result}.html
                """)
}

def get_html_file_period(String result, String alert_name, String period, String options = '') {
    sh ("""echo  "<html>
                <header><title> Alert : ${alert_name}</title></header>
                <body> <p>Hi All,</p>
                <p><br>Please find below report of ${alert_name} ${period} in ${params.v_env}.</p>
                <p>${options}</p>" > ${result}.html
                cat ${result}_email_content_final >> ${result}.html
                echo "<p><br>Thanks and Regards,<br><b><u>F1 Analytics Platform Team</u></b></p>
                <p>------------------------------------------------------------------------------------------------------------------------------------
                <br><i>This is an auto generated email. Please do not reply to this email.</i><br>
                ------------------------------------------------------------------------------------------------------------------------------------</p></body>
                </html>" >> ${result}.html
                """)
}

def get_send_mail_with_count(String result, String alert_name, String owner_email, String alert_name_table, String options = '') {
    //myfilecount="${WORKSPACE}/${alert_name_table}_${owner_email}_alert_count.csv"
    myfilecount="${WORKSPACE}/${alert_name_table}_${result}_alert_count.csv"

    sh ("cat $myfilecount > alert_record_outFile")

    readFile(myfilecount).split('\n').each { line ->
                            println("Printing Line")
                            print(line)
                            def fields = line.split('\t')
                            echo "readCSV condition passed"
                            def alert_flag = fields[0]
                            println("Printing alert_flag")
                            println(alert_flag)
                            def escalation_flag = fields[1]
                            println("Printing escalation_flag")
                            println(escalation_flag)

                            if (alert_flag == "0" && escalation_flag == "0") {
                                println("Alert will be send to the users")
                                myfile="${WORKSPACE}/${result}_alert.csv"
                                sh """
                                awk -F'\t' '{print NF}' ${myfile} | sort -nu | tail -n 1 > ${result}_outFile
                                """
                                colcnt = readFile "${result}_outFile"
                                colcnt = colcnt.toInteger()
                                println(colcnt)
                                if (fileExists(myfile)) {
                                    if (colcnt > 0) {
                                        emailext mimeType: 'text/html',
                                        to: "${owner_email}, cc:${params.v_recipients},${options}",
                                        subject: "${params.v_env} - [ALERT] New Snowflake Notification - ${alert_name}",
                                        body: readFile("${WORKSPACE}/${result}.html")
                                    }
                                    else {
                                            echo 'Result not exists'
                                        }
                                }
                                else {
                                    echo 'No any Alerts to send mail'
                                }
                            }
                            if (alert_flag == "1" && escalation_flag == "0") {
                                println("Escalation mail sending to the Ops and Manager")
                                myfile="${WORKSPACE}/${result}_alert.csv"
                                sh """
                                awk -F'\t' '{print NF}' ${myfile} | sort -nu | tail -n 1 > ${result}_outFile
                                """
                                colcnt = readFile "${result}_outFile"
                                colcnt = colcnt.toInteger()
                                println(colcnt)
                                if (fileExists(myfile)) {
                                    if (colcnt > 0) {
                                        emailext mimeType: 'text/html',
                                        to: "${params.v_escalation}, cc:${params.v_recipients},${options}",
                                        subject: "Escalation - ${params.v_env} - [ALERT] New Snowflake Notification - ${alert_name}",
                                        body: readFile("${WORKSPACE}/${result}.html")
                                        sh ("""
                                                /usr/local/bin/snowsql --config `pwd`/config.tmp  -c novartis_tmp  -f `pwd`/sql_scripts/alerting_framework/alert_metadata/escalation_count.sql -D v_alert_name=${alert_name_table} -D v_owner_email=${owner_email} -o variable_substitution=true
                                                """)
                                    }
                                    else {
                                            echo 'Result not exists'
                                        }
                                }
                                else {
                                    echo 'No any Alerts to send mail'
                                }
                            }
                            else {
                                println("Escalation Alert mail already sent to the Ops and Manager. No alert will flow from now onwards.")
                            }
                    }

}

def get_send_mail(String result, String alert_name, String owner_email, String options = '') {
    myfile="${WORKSPACE}/${result}_alert.csv"
    sh """
    awk -F'\t' '{print NF}' ${myfile} | sort -nu | tail -n 1 > ${result}_outFile
    """
    colcnt = readFile "${result}_outFile"
    colcnt = colcnt.toInteger()
    println(colcnt)
    if (fileExists(myfile)) {
        if (colcnt > 0) {
            emailext mimeType: 'text/html',
            to: "${owner_email}, cc:${params.v_recipients},${options}",
            subject: "${params.v_env} - [ALERT] New Snowflake Notification - ${alert_name}",
            body: readFile("${WORKSPACE}/${result}.html")
        }
        else {
                echo 'Result not exists'
            }
    }
    else {
        echo 'No any Alerts to send mail'
    }
}

def get_send_mail_platform(String result, String alert_name, String options = '') {
    myfile="${WORKSPACE}/${result}_alert.csv"
    sh """
    awk -F'\t' '{print NF}' ${myfile} | sort -nu | tail -n 1 > ${result}_outFile
    """
    colcnt = readFile "${result}_outFile"
    colcnt = colcnt.toInteger()
    println(colcnt)
    if (fileExists(myfile)) {
        if (colcnt > 0) {
            emailext mimeType: 'text/html',
            to: "${params.v_recipients},${options}",
            subject: "${params.v_env} - [ALERT] New Snowflake Notification - ${alert_name}",
            body: readFile("${WORKSPACE}/${result}.html")
        }
        else {
                echo 'Result not exists'
            }
    }
    else {
        echo 'No any Alerts to send mail'
    }
}

def get_html_file_scim(String result, String alert_name, String msg = '', String options = '') {
    sh ("""echo  "<html>
                <header><title> Alert : ${alert_name}</title></header>
                <body> <p>Hi All,</p>
                <p style="color:red"><br><b>HIGH ALERT in ${params.v_env}!!!</b></p>
                <p style="color:red">${msg} ${options} days</p>" > ${result}.html
                echo "<p><br>Thanks and Regards,<br><b><u>F1 Analytics Platform Team</u></b></p>
                <p>------------------------------------------------------------------------------------------------------------------------------------
                <br><i>This is an auto generated email. Please do not reply to this email.</i><br>
                ------------------------------------------------------------------------------------------------------------------------------------</p></body>
                </html>" >> ${result}.html
                """)
}

def get_webhook_usr_output(String alert_name, String filter, String options = '') {
    sh ("""
        set +x
        rm -rf ${filter}_alert.txt 2>/dev/null
        /usr/local/bin/snowsql --config `pwd`/config.tmp  -c novartis_tmp  -f `pwd`/sql_scripts/${options}${alert_name}.sql -D v_filter=${filter} -o exit_on_error=true -o friendly=false -o header=true -o timing=false -o variable_substitution=true -o output_file=${filter}_alert.txt -o output_format=fancy_grid
        """)
    
    output_file= readFile "${filter}_alert.txt"
    office365ConnectorSend webhookUrl: 'https://novartis.webhook.office.com/webhookb2/7c6e8fe3-e07c-4df4-b3d9-efdd13afe1a3@f35a6974-607f-47d4-82d7-ff31d7dc53a5/JenkinsCI/4e52d5059d99469ab59357dd18d7df79/6090bb31-3300-4fba-aaba-0f27c901e511',
    factDefinitions: [[name: alert_name]],
    message: output_file,
    status: alert_name
}

/*
def get_webhook_output_old(String alert_name, String options = '') {
    sh ("""
        set +x
        rm -rf ${alert_name}_alert.txt 2>/dev/null
        /usr/local/bin/snowsql --config `pwd`/config.tmp  -c novartis_tmp  -f `pwd`/sql_scripts/${options}${alert_name}.sql -o exit_on_error=true -o friendly=false -o timing=false -o header=true -o variable_substitution=true -o output_file=${alert_name}_alert.txt -o output_format=fancy_grid
        """)
    output_file= readFile "${alert_name}_alert.txt"
    office365ConnectorSend webhookUrl: 'https://novartis.webhook.office.com/webhookb2/7c6e8fe3-e07c-4df4-b3d9-efdd13afe1a3@f35a6974-607f-47d4-82d7-ff31d7dc53a5/JenkinsCI/4e52d5059d99469ab59357dd18d7df79/6090bb31-3300-4fba-aaba-0f27c901e511',
    factDefinitions: [[name: alert_name]],
    message: output_file,
    status: alert_name
}
*/

def get_webhook_output(String alert_name, String options = '') {
    sh ("""
        set -x
        rm -rf pre_${alert_name}_alert.csv 2>/dev/null
        /usr/local/bin/snowsql --config `pwd`/config.tmp  -c novartis_tmp  -f `pwd`/sql_scripts/${options}${alert_name}.sql -o exit_on_error=true -o friendly=false -o timing=false -o header=false -o variable_substitution=true -o output_file=pre_${alert_name}_alert.csv -o output_format=tsv
        """)
    pre_output_file="${WORKSPACE}/${alert_name}_alert.csv"
    sh """
    awk -F'\t' '{print NF}' ${pre_output_file} | sort -nu | tail -n 1 > ${alert_name}_outFile
    """
    colcnt = readFile "${alert_name}_outFile"
    colcnt = colcnt.toInteger()
    println(colcnt)
    if (fileExists(pre_output_file)) {
        if (colcnt > 0) {
            sh ("""
            set +x
            rm -rf ${alert_name}_alert.txt 2>/dev/null
            /usr/local/bin/snowsql --config `pwd`/config.tmp  -c novartis_tmp  -f `pwd`/sql_scripts/${options}${alert_name}.sql -o exit_on_error=true -o friendly=false -o timing=false -o header=true -o variable_substitution=true -o output_file=${alert_name}_alert.txt -o output_format=fancy_grid
            """)
            office365ConnectorSend webhookUrl: 'https://novartis.webhook.office.com/webhookb2/7c6e8fe3-e07c-4df4-b3d9-efdd13afe1a3@f35a6974-607f-47d4-82d7-ff31d7dc53a5/JenkinsCI/4e52d5059d99469ab59357dd18d7df79/6090bb31-3300-4fba-aaba-0f27c901e511',
            factDefinitions: [[name: alert_name]],
            message: output_file,
            status: alert_name
            }
        else {echo 'Result not exists'}
    }
    else {echo 'No any Alerts to send...'}
}